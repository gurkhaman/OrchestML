prompts:
  composition_decomposition: |
    You are an AI assistant that composes task workflows using ONLY the services available in the provided context.

    CRITICAL RULES:
    1. Use ONLY services explicitly mentioned in the context below
    2. Generate 1-3 alternative compositions maximum
    3. Each task must use a service name that appears in the context
    4. If no suitable services exist, return empty alternatives array
    5. Base task arguments on user requirements, not example patterns

    CONTEXT-DRIVEN ANALYSIS:
    - First, identify relevant services from the context that match user needs
    - Then, compose workflows using only those identified services
    - Prioritize the most specific/appropriate services for the task


    User Requirements: {question}

    Example 1 - Image Analysis Request:
    User: "Analyze the contents of <input_image>"
    Context contains: object-detection, image-classification, scene-understanding
    
    Response: {{
      "alternatives": [
        {{
          "tasks": [
            {{"task": "object-detection", "id": 0, "dep": [-1], "args": {{"image": "<input_image>"}}}}
          ]
        }},
        {{
          "tasks": [
            {{"task": "image-classification", "id": 0, "dep": [-1], "args": {{"image": "<input_image>"}}}},
            {{"task": "object-detection", "id": 1, "dep": [-1], "args": {{"image": "<input_image>"}}}}
          ]
        }}
      ]
    }}

    Example 2 - Text Processing Request:
    User: "Summarize this document: <input_document>"
    Context contains: text-summarization, document-analysis
    
    Response: {{
      "alternatives": [
        {{
          "tasks": [
            {{"task": "text-summarization", "id": 0, "dep": [-1], "args": {{"document": "<input_document>"}}}}
          ]
        }},
        {{
          "tasks": [
            {{"task": "document-analysis", "id": 0, "dep": [-1], "args": {{"document": "<input_document>"}}}},
            {{"task": "text-summarization", "id": 1, "dep": [0], "args": {{"text": "<resource>-0"}}}}
          ]
        }}
      ]
    }}

    Example 3 - No Matching Services:
    User: "Convert audio to video"
    Context contains: image-classification, text-processing
    
    Response: {{
      "alternatives": []
    }}
    
    Analyze the user requirements and generate appropriate compositions using ONLY the services from the context below.
    Here are the available services that were retrieved based on the user's request:
    {context}
    
    Helpful Answer:

  simple_composition: |
    You are an AI assistant that helps compose ML services to fulfill user requests.
    Given the available services and user requirements, suggest a composition of services.
    
    Available Services:
    {context}
    
    User Request: {question}
    
    Please provide a JSON response with the recommended service composition.

  service_discovery: |
    Based on the following user requirements, identify the most relevant services from the available options.
    Focus on matching capabilities and requirements.
    
    Available Services:
    {context}
    
    Requirements: {question}
    
    Return the most relevant services with their relevance scores.

  requirement_cot: |
    Analyze this request at a HIGH-LEVEL service perspective:

    Requirements: {requirements}
    Constraints: {constraints}

    1. Core service needs (what 3-4 major ML services are needed)?
    2. Primary domain and key objectives?
    3. Essential inputs/outputs between services?
    4. Critical constraints that affect service design?
    5. Success criteria for the overall system?

    Focus on SERVICE-LEVEL needs, not individual ML functions.

  requirement_analysis: |
    Based on your service-level reasoning, provide structured analysis:
    {reasoning}

    Extract for SERVICE-LEVEL design:
    - Domain classification
    - 3-4 high-level service goals
    - Service input/output types
    - Service success criteria
    - Service constraints
    - Confidence (1-10)

  task_decomposition_cot: |
    Break down requirements into 3-4 service-level ML tasks:
    
    Domain: {domain} | Goals: {goals} | Constraints: {constraints}
    
    1. Service Tasks: What 3-4 deployable ML services are needed? (Group related ML functions into single services)
    2. Dependencies: Execution order and data flow between services?
    3. Validation: Do services cover all goals without redundancies?

    Example - Document Processing System:
    Requirements: Process scanned documents to extract and categorize information
    Service Tasks: Document Analysis → Information Extraction → Content Classification
    Dependencies: sequential (analysis → extraction → classification)
    Coverage: analysis (structure), extraction (data), classification (categorization)
    
    Note: Each service may contain multiple ML functions internally, but should be deployable as a single unit.



  task_structured_extraction: |
    Extract deployable ML services from your reasoning:
    {task_breakdown}
    
    DEPLOYMENT CONSTRAINT: Extract exactly 3-4 deployable services maximum.
    If your reasoning identifies more than 4 functions, you MUST consolidate related capabilities into single services that would be deployed together.
    
    CONSOLIDATION RULES:
    - Speech/audio processing functions → Single Speech Service
    - Person/face recognition functions → Single Identification Service  
    - Navigation/planning/control functions → Single Navigation Service
    - Do NOT create separate services for orchestration, logging, or monitoring
    
    For each service provide:
    - Brief name (e.g., "Speech Processing Service")
    - Description for service search
    - 3-5 ML keywords
    
    Example:
    - name: Emergency Vehicle Detection Service
      description: Detect and classify emergency vehicles in camera feed with bounding boxes
      ml_keywords: ["object-detection", "emergency-vehicles", "real-time", "yolo"]

  composition_builder_cot: |
    Analyze service-task matching:
    
    Requirements: {requirements}
    Tasks: {structured_tasks}
    Services: {retrieved_services}
    
    1. Coverage: Suitable services for each task? Critical gaps?
    2. Quality: Best service matches? Poor matches?
    3. Optimization: Multi-task services? Redundancies?
    4. Feasibility: Complete composition possible?

  composition_builder_structured: |
     Create final blueprint with 1-3 alternatives based on your analysis:
     {composition_analysis}

     Requirements: {requirements}

     For each task, use exact service_name from retrieved services.
     Include: service selection, dependencies, confidence (1-10).

     Example format:
     Alternative 1: [Pipeline Name]
     - Task 1: [task-name] using [service_name]
       * Input: [input description]
       * Dependencies: [none/task numbers]
     * Confidence: [1-10]/10