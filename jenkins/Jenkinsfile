pipeline {
    agent any
    stages {
        stage('Test ComposureCI API') {
            steps {
                script {
                    echo "Testing ComposureCI Orchestrator..."
                    
                    // Test orchestrator health
                    def health = sh(
                        script: 'curl -s http://orchestrator:8000/api/v1/health',
                        returnStdout: true
                    ).trim()
                    echo "Orchestrator Health: ${health}"
                    
                    // Test full system health (orchestrator â†’ repository)
                    def fullHealth = sh(
                        script: 'curl -s http://orchestrator:8000/api/v1/health/full',
                        returnStdout: true
                    ).trim()
                    echo "Full System Health: ${fullHealth}"
                    
                    // Test vectorstore startup
                    def startupResponse = sh(
                        script: 'curl -s -X POST http://orchestrator:8000/api/v1/vector-store/startup',
                        returnStdout: true
                    ).trim()
                    echo "Vectorstore Startup Response: ${startupResponse}"
                    
                    // Parse startup response and validate
                    if (!startupResponse.contains('success')) {
                        error("Vectorstore startup failed. Response: ${startupResponse}")
                    }
                    echo "Vectorstore startup verified successfully"
                    
                    // Test search endpoint (new RAG functionality)
                    def searchResponse = sh(
                        script: '''
                            curl -s -X POST http://orchestrator:8000/api/v1/search \
                              -H "Content-Type: application/json" \
                              -d '{"query": "object detection", "k": 3}'
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Search Response: ${searchResponse}"
                    
                    // Validate search response contains expected fields
                    if (!searchResponse.contains('query') || !searchResponse.contains('results') || !searchResponse.contains('total_results')) {
                        error("Search response missing required fields. Response: ${searchResponse}")
                    }
                    echo "Search endpoint validated successfully"
                    
                    // Test RAG endpoint with simple_composition prompt
                    def ragResponse = sh(
                        script: '''
                            curl -s -X POST http://orchestrator:8000/api/v1/rag \
                              -H "Content-Type: application/json" \
                              -d '{"question": "I need object detection service", "prompt_name": "simple_composition"}'
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "RAG Response: ${ragResponse}"
                    
                    // Validate RAG response contains expected fields
                    if (!ragResponse.contains('status') || !ragResponse.contains('question') || !ragResponse.contains('answer')) {
                        error("RAG response missing required fields. Response: ${ragResponse}")
                    }
                    
                    // Check if RAG was successful
                    if (!ragResponse.contains('"status":"success"')) {
                        error("RAG request failed. Response: ${ragResponse}")
                    }
                    echo "RAG endpoint validated successfully"
                    
                    // Test composition endpoint
                    def response = sh(
                        script: '''
                            curl -s -X POST http://orchestrator:8000/api/v1/compose \
                              -H "Content-Type: application/json" \
                              -d '{"requirements": "deliver book to Joe using speech and face recognition", "constraints": {"device": "turtlebot"}}'
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Composition Response: ${response}"
                    
                    // Validate composition response
                    if (!response.contains('composition_id') || !response.contains('status') || !response.contains('services')) {
                        error("Composition response missing required fields. Response: ${response}")
                    }
                    echo "Composition endpoint validated successfully"
                }
            }
        }
    }
}